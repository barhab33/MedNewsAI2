name: update-news

on:
  workflow_dispatch: {}        # manual Run button
  schedule:
    - cron: "0 */8 * * *"      # every 8 hours

permissions:
  contents: write
  actions: read
  id-token: write

concurrency:
  group: update-news
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      # Required for DB
      VITE_BOLTDATABASE_URL: ${{ secrets.VITE_BOLTDATABASE_URL }}
      VITE_BOLTDATABASE_ANON_KEY: ${{ secrets.VITE_BOLTDATABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
      # Optional AI / images
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Quick sanity
        shell: bash
        run: |
          set -e
          node -v
          echo "Root:"; ls -la || true
          echo "scripts/:"; ls -la scripts || true
          echo "public/:"; ls -la public || true

      - name: Install dependencies
        shell: bash
        run: |
          set -e
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      - name: Check required secrets (minimal, no emojis)
        shell: bash
        run: |
          set -e
          if [ -z "$VITE_BOLTDATABASE_URL" ]; then echo "VITE_BOLTDATABASE_URL missing"; exit 1; fi
          if [ -z "$VITE_BOLTDATABASE_ANON_KEY" ]; then echo "VITE_BOLTDATABASE_ANON_KEY missing"; exit 1; fi
          if [ -z "$SUPABASE_SERVICE_ROLE" ]; then echo "SUPABASE_SERVICE_ROLE missing"; exit 1; fi
          echo "Required secrets present"
          echo "Optional keys:"
          if [ -n "$GEMINI_API_KEY" ]; then echo "  GEMINI_API_KEY: yes"; else echo "  GEMINI_API_KEY: no"; fi
          if [ -n "$PEXELS_API_KEY" ]; then echo "  PEXELS_API_KEY: yes"; else echo "  PEXELS_API_KEY: no"; fi
          if [ -n "$GOOGLE_API_KEY" ]; then echo "  GOOGLE_API_KEY: yes"; else echo "  GOOGLE_API_KEY: no"; fi
          if [ -n "$OPENAI_API_KEY" ]; then echo "  OPENAI_API_KEY: yes"; else echo "  OPENAI_API_KEY: no"; fi
          if [ -n "$ANTHROPIC_API_KEY" ]; then echo "  ANTHROPIC_API_KEY: yes"; else echo "  ANTHROPIC_API_KEY: no"; fi

      - name: Crawl & summarize (auto-detect script)
        shell: bash
        run: |
          set -e
          FOUND=""
          CANDIDATES="scripts/crawl-multi-source.cjs scripts/crawl-multi-ai.cjs scripts/crawl-supabase.cjs scripts/crawl.cjs scripts/crawler.cjs crawl-multi-source.cjs crawl-multi-ai.cjs crawl-supabase.cjs crawl.cjs crawler.cjs index.cjs"
          for f in $CANDIDATES; do
            if [ -f "$f" ]; then
              FOUND="$f"
              break
            fi
          done
          if [ -z "$FOUND" ]; then
            echo "No crawler script found; skipping crawl."
          else
            echo "Using crawler: $FOUND"
            node "$FOUND"
          fi

      - name: Maintenance: normalize legacy URLs & prune (if present)
        shell: bash
        run: |
          set -e
          if [ -f scripts/maintenance-normalize.cjs ]; then
            echo "Running maintenance-normalize"
            node scripts/maintenance-normalize.cjs
          else
