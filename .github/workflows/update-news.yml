name: update-news

on:
  schedule:
    - cron: "0 */8 * * *"   # every 8 hours
  workflow_dispatch: {}

permissions:
  contents: write
  actions: read
  id-token: write

concurrency:
  group: update-news
  cancel-in-progress: false

jobs:
  run-pipeline:
    runs-on: ubuntu-latest

    env:
      # Bolt DB envs (shim accepts SUPABASE_* if you add later)
      VITE_BOLTDATABASE_URL: ${{ secrets.VITE_BOLTDATABASE_URL }}
      VITE_BOLTDATABASE_ANON_KEY: ${{ secrets.VITE_BOLTDATABASE_ANON_KEY }}
      # If any script WRITES to DB, include the service role (server-only)
      SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
      # AI keys used by original crawler/summarizer
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Debug env presence
        shell: bash
        run: |
          set -e
          [ -n "$VITE_BOLTDATABASE_URL" ] && echo "VITE_BOLTDATABASE_URL set" || (echo "VITE_BOLTDATABASE_URL MISSING" && exit 1)
          [ -n "$VITE_BOLTDATABASE_ANON_KEY" ] && echo "VITE_BOLTDATABASE_ANON_KEY set" || (echo "VITE_BOLTDATABASE_ANON_KEY MISSING" && exit 1)
          echo "Optional keys present:" \
            GEMINI:$([ -n "$GEMINI_API_KEY" ] && echo yes || echo no) \
            GOOGLE:$([ -n "$GOOGLE_API_KEY" ] && echo yes || echo no) \
            OPENAI:$([ -n "$OPENAI_API_KEY" ] && echo yes || echo no) \
            ANTHROPIC:$([ -n "$ANTHROPIC_API_KEY" ] && echo yes || echo no)

      - name: Crawl & summarize (auto-detect script)
        shell: bash
        run: |
          set -e
          CANDIDATES=(
            "scripts/crawl-multi-ai.cjs"
            "scripts/crawl-multi-source.cjs"
            "scripts/crawl-supabase.cjs"
            "scripts/crawl.cjs"
            "scripts/crawler.cjs"
            "crawl-multi-ai.cjs"
            "crawl-multi-source.cjs"
            "crawl-supabase.cjs"
            "crawl.cjs"
            "crawler.cjs"
            "index.cjs"
          )
          FOUND=""
          for f in "${CANDIDATES[@]}"; do
            if [ -f "$f" ]; then FOUND="$f"; break; fi
          done
          if [ -z "$FOUND" ]; then
            echo "No crawler script found; skipping crawl."
            exit 0
          fi
          echo "Using crawler: $FOUND"
          node "$FOUND"

      - name: Export to public (root or scripts/)
        shell: bash
        run: |
          set -e
          if [ -f scripts/export-to-public.cjs ]; then
            echo "Exporting via scripts/export-to-public.cjs"
            node scripts/export-to-public.cjs
          elif [ -f export-to-public.cjs ]; then
            echo "Exporting via root export-to-public.cjs"
            node export-to-public.cjs
          else
            echo "No export-to-public script found at root or scripts/ — skipping."
          fi

      - name: Verify latest inserts (last 12h)
        shell: bash
        run: |
          set -e
          node - <<'JS'
          const { sb } = require('./scripts/lib/supabase-server.cjs');
          (async () => {
            const since = new Date(Date.now() - 12*3600*1000).toISOString();
            const { data, error, count } = await sb
              .from('medical_news')
              .select('id,title,source,published_at,created_at', { count: 'exact' })
              .gte('coalesce(published_at, created_at)', since)
              .order('coalesce(published_at, created_at)', { ascending: false });
            if (error) { console.error('Verify failed:', error); process.exit(1); }
            const n = (typeof count === 'number') ? count : (data?.length || 0);
            console.log(`Inserted/updated in last 12h: ${n}`);
            (data || []).slice(0, 10).forEach((r, i) =>
              console.log(`#${i+1}: ${r.title} • ${r.source} • ${(r.published_at||r.created_at)}`));
          })().catch(e => { console.error(e); process.exit(1); });
          JS

      - name: Commit & push changes
        shell: bash
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore: auto update news [skip ci]" || echo "No changes to commit"
          git push
